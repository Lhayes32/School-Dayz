namespace stack_sequence_4
{
	template <typename T>
	sequence<T>::sequence()
	{
		first=std::stack<T>();
		second=std::stack<T>();
	
	}
	
	template <typename T>
	void sequence<T>::start()
	{
		while(first.size() > 0)
		{
			second.push(first.top());
			first.pop();
		}
		if(!second.empty())
		{
			first.push(second.top());
			second.pop();
		}
	
	}
	
	template <typename T>
	void sequence<T>::advance()
	{
		if(!second.empty())
		{
			first.push(second.top());
			second.pop();
		}
		else
		{
			while(first.size() > 0)
			{
				second.push(first.top());
				first.pop();
			}
		}
	
	}
	
	template <typename T>
	void sequence<T>::insert(const T& entry)
	{
		
		if(is_item())
		{
			second.push(first.top());
			first.pop();
		}
		first.push(entry);
	
	}


	
	template <typename T>
	void sequence<T>::attach(const T& entry)
	{
		if(!is_item())
		{
			while(second.size() > 0)
			{
				first.push(second.top());
				second.pop();
			}
		}
		
		first.push(entry);
	}
	
	template <typename T>
	void sequence<T>::remove_current()
	{
		if(is_item())
		{
			first.pop();
		}
		if(!second.empty())
		{
			first.push(second.top());
			second.pop();
		}
		else
		{
			while(first.size() > 0)
			{
				second.push(first.top());
				first.pop();
			}
		}
	}
	
	// CONSTANT MEMBER FUNCTIONS
	template <typename T>
	typename sequence<T>::size_type sequence<T>::size() const
	{
		return first.size()+second.size();
	}
	
	template <typename T>
	bool sequence<T>::is_item() const
	{
		return !(first.empty());
	}
	
	template <typename T>
	T sequence<T>::current() const
	{
		return first.top();
	}
}



