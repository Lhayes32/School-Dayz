#include <cassert>
#include <cstdlib>
#include <iostream>
#include <set>
using namespace std;
namespace main_savitch_15
{


	template <class Item>
	graph<Item>:: graph( ) {
	}
	
	template <class Item>
	void graph<Item>::add_vertex(const Item& label)
	// Library facilities used: cassert, cstdlib
	{
		labels.push_back(label);   
	}
	
	template <class Item>
	void graph<Item>::add_edge(std::size_t source, std::size_t target)
	// Library facilities used: cassert, cstdlib
	{
	    
	    std::set<size_t> new_edge;

		new_edge.insert(source);
		new_edge.insert(target + 10);
		edges.push_back(new_edge);
	}
	
	template <class Item>
	void graph<Item>::remove_edge(std::size_t source, std::size_t target)
	{
		typename std::vector<Item>::iterator it;
		for(it = edges.begin(); it != edges.end(); ++it)
		{
			if(*((*it).begin()) == source &&  (*((*it).begin()+1)) == target)
				edges.erase(*it);
		}
	}
	
	template <class Item>
	Item& graph<Item>::operator[ ] (std::size_t vertex)
	// Library facilities used: cassert, cstdlib
	{
		typename std::vector<Item>::iterator it = labels.begin();
		it += (vertex);
	    return *it;     // Returns a reference to the label
	}
	
	template <class Item>
	std::size_t graph<Item>::size() const
	{
		return labels.size();
	
	}
	
	template <class Item>
	bool graph<Item>::is_edge(std::size_t source, std::size_t target) const
	{
		typename std::vector<Item>::iterator it;
		for(it = edges.begin(); it != edges.end(); ++it)
		{
			if(*((*it).begin()) == source &&  (*((*it).begin()+1)) == target)
				return true;
		}
		return false;
	}
	
	template <class Item>
	std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const
	{
		//typename std::vector<Item>::iterator it ;
		std::set<size_t> thy_neighbor;
		for(auto it = edges.begin(); it != edges.end(); ++it)
		{
			typename std::set<size_t>::iterator s_it = (*it).begin();
			int a = *s_it;
			++s_it;
			int b = (*(s_it)) - 10;;
			if(a == vertex)
			{
					thy_neighbor.insert(b);
			}
				
		}
		return thy_neighbor;
	}

	template <class Item>
	Item graph<Item>::operator[ ] (std::size_t vertex) const
	// Library facilities used: cassert, cstdlib
	{
	    typename std::vector<Item>::iterator it = labels.begin();
		it += (vertex);
	    return *it;     // Returns a reference to the label
	}

}


